package main

import (
	"fmt"
	"log"
	"log/slog"
	"os"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

//sourceList := []string{
//"https://youtu.be/fregObNcHC8?si=i6UOeeOX1-nfsnS1",
//"https://youtu.be/YlUKcNNmywk?si=C5sBoPvGMcIR0I6Y https://youtu.be/hQ_Z-10dXSE?si=iPkeHajH-A064gCq",
//}

var (
	bot         *tgbotapi.BotAPI
	taskQueue   chan *tgbotapi.Message // –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
	workerCount = 2                    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
	wg          sync.WaitGroup
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN environment variable not set")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
	taskQueue = make(chan *tgbotapi.Message, 100)

	// –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–æ–≤
	for i := 0; i < workerCount; i++ {
		wg.Add(1)
		go worker(i)
	}

	var err error
	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ long polling
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		if update.Message != nil {
			select {
			case taskQueue <- update.Message:
				log.Printf("Message %d added to queue", update.Message.MessageID)
			default:
				log.Printf("Queue is full, message %d dropped", update.Message.MessageID)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
				bot.Send(msg)
			}
		}
	}

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
	close(taskQueue)
	wg.Wait()
}

func worker(id int) {
	defer wg.Done()
	log.Printf("Worker %d started", id)

	for message := range taskQueue {
		log.Printf("Worker %d processing message %d", id, message.MessageID)
		// todo: useris filter
		if message.IsCommand() {
			handleCommand(message)
		} else {
			handleExpression(message)
		}
	}

	log.Printf("Worker %d stopped", id)
}

func handleCommand(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID, "")
	switch message.Command() {
	case "start":
		msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–∞—á–∞—Ç–æ—Ä! ü¶æ\n\n" +
			"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—á–µ—Ä–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n" +
			"üìΩÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å: —Å–µ–π—á–∞—Å —è —É–º–µ—é —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ Jellyfin. –í –±—É–¥—É—â–µ–º –Ω–∞—É—á—É—Å—å –¥—Ä—É–≥–æ–º—É."
	case "help":
		msg.Text = "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ üì∫ (–ª—é–±–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã) –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Å–∫–∞—á–∞—Ç—å.\n\n" +
			"‚úÖ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n" +
			"‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n- –ü—Ä–µ—Ä–≤–∞—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è. –í—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ–µ –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω–æ –∏–ª–∏ —É–º—Ä–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é ‚è≤Ô∏è —Ç–∞–π–º–∞—É—Ç–∞"
	case "status":
		msg.Text = fmt.Sprintf("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n- –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: %d\n- –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: %d", len(taskQueue), workerCount)
	default:
		msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
	}

	if _, err := bot.Send(msg); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}

func handleExpression(message *tgbotapi.Message) {
	startTime := time.Now()
	expr := strings.TrimSpace(message.Text)
	if expr == "" {
		return
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	processingMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("‚è≥ –ö–∞—á–∞—é, –∫–∞—á–∞—é, –æ–∂–∏–¥–∞–π—Ç–µ: %s...", expr))
	processingMsg.DisableWebPagePreview = true
	sentMsg, _ := bot.Send(processingMsg)

	var ytDlp = *newYtDlp()
	ytDlp.setOutputPath(os.Getenv("YT_DLP_OUTPUT_DIR"))
	ytDlp.setOutputType(os.Getenv("YT_DLP_OUTPUT_FORMAT"))
	ytDlp.setBinaryPath(os.Getenv("YT_DLP_BINARY"))
	if os.Getenv("YT_DLP_PROXY") != "" {
		ytDlp.setProxy(os.Getenv("YT_DLP_PROXY"))
	}
	ytDlp.inputStrings = []string{expr}
	res := ytDlp.runCommand()

	// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	deleteMsg := tgbotapi.NewDeleteMessage(message.Chat.ID, sentMsg.MessageID)
	bot.Send(deleteMsg)

	response := tgbotapi.NewMessage(message.Chat.ID, "")

	var answerText []string
	for _, result := range res {
		if result.Error != nil {
			answerText = append(answerText, fmt.Sprintf("‚ùå %s\n", result.Output))
		} else if result.Output != "" {
			answerText = append(answerText, fmt.Sprintf("‚úîÔ∏è %s\n", result.Output))
		}
	}
	slog.Info(fmt.Sprintf("%s", res))
	processingTime := time.Since(startTime).Round(time.Millisecond)
	response.Text = fmt.Sprintf("‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: %v\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n", processingTime)
	for idx, line := range answerText {
		response.Text = response.Text + fmt.Sprintf("%v. %s\n", idx+1, line)
	}

	response.ParseMode = "Markdown"
	if _, err := bot.Send(response); err != nil {
		log.Printf("Error sending message: %v", err)
	}
}
